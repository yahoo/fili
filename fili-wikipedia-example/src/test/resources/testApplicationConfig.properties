# Copyright 2016 Yahoo Inc.
# Licensed under the terms of the Apache license. Please see LICENSE.md file distributed with this work for terms.

# Version key for the health check to pick up the version
bard__version = Test version

# Test URLs for the brokers
bard__druid_broker = http://broker
#Test URL for the coordinator
bard__druid_coord = http://coordinator

# Resource binder is critical to starting the app
bard__resource_binder = com.yahoo.wiki.webservice.application.WikiBinderFactory

# Don't delete, use for testing!
bard__sample_default_config = default-config

# Rate Limiting -- Not necessary for localhosts. here for documentation purposes
bard__request_limit_global = 70
bard__request_limit_per_user = 2
bard__request_limit_ui = 52

# Setting for druid query weight limit
bard__query_weight_limit = 100000

# Default the timeout to 10 minutes, in milliseconds
bard__druid_request_timeout = 600000

# Druid segments loaded in recent 5 mins are considered to be fresh
bard__fresh_segment_period = 300000

# Don't start Partial data loading during tests
bard__druid_seg_loader_timer_delay = -1

# Druid segment metadata loader scheduled to run every one minute
bard__druid_seg_loader_timer_duration = 60000

# Druid segment metadata loader health check last run duration - every 2 minutes
bard__seg_loader_health_check_last_run_duration = 120000

# Partial data feature flag
bard__partial_data_enabled = true

# MemCached configuration
bard__memcached_servers = localhost:11211
bard__memcached_expiration_seconds = 3600

# Data Cache strategy, whose value is one of the following
# 1. ETag
#    This is the same thing as LocalSignature except that Etag optimizes to avoid the possibility of cache out-of-sync
#    problem. ETag relies on Druid to generate the signature(hash) instead of Fili
# 2. LocalSignature (cache V2, deprecated)
#    Maintains a mapping of (query, druidSegmentHash) -> DruidResponse. When a query comes in, Fili finds and computes
#    hash of all segments involved in that query. The query itself and the segment hash are combined together as the
#    cache key. If it's a new query or Druid reprocessed so that the segments change, there won't be a cache key in the
#    mapping and Fili talks to Druid to get new result. There is a possibility of cache out-of-sync problem when Druid
#    reprocesses and the segment scanner updates
# 3. Ttl (cache V1, deprecated)
#    "Ttl" stands for "Time to live". This strategy does NOT account for reprocessing. If you run a query, a cache is
#    generated with a TTL period. Until the cache entry expires(TTL > 0), same result will be sent back on the same
#    query; this is the case even when Druid has updated its data(result). Client using this cache strategy can
#    potentially receive stale results until the cache entry for that query expires.
# 4. NoCache
bard__query_response_caching_strategy = TtlOnly

# Lucene index files path
bard__lucene_index_path=./target/tmp/

# max results without filters
bard__max_results_without_filters=10000

# Default number of records per-page
bard__default_per_page=10000

bard__updated_metadata_collection_names_enabled = false
